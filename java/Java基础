[TOC]

## Java概述

### java的特点

面向对象、安全性、分布式、移植性、可解释性、高性能性、健壮性、多线程性、易学性。

### 面向对象和面向过程的区别

1. 面向对象的性能比面向过程低，因为需要对象的创建开销等。
2. 面向对象比面向过程更具有移植性。

### Java和C++的区别

1. Java面向对象，c++面向过程。
2. java是单继承，c++是多继承。
3. java没有指针，所以内存更安全。
4. java具有自动回收内存的机制。



## Java环境配置

### jdk和jre的区别

1. jdk包含jre，拥有虚拟机和编译器，是开发人员必备
2. jre只有虚拟机不含编译器，不能进行编译，只可以运行编译好的程序，不适合开发人员使用

## java基本程序设计结构

### java的命名规则

1. 类名采取驼峰规则：`ClassName`
2. 变量名采取小驼峰：`className`
3. 常量采用大写：`CLASSNAME`

### 注释的几种方法

1. `//`用于单行注释
2. `/**/`用于多行注释
3. `/***/`多用于自动生成文档

### 数据类型

java是一种强类型语言，也就是每个变量必须规定一种类型。java一共有==8==种基本类型。其中有==4种==整型、==2种==浮点类型、==1种==字节类型和==1种==真值类型。

1. 整型

   | 类型  | 存储需求 |
   | ----- | -------- |
   | byte  | 1字节    |
   | short | 2字节    |
   | int   | 4字节    |
   | long  | 8字节    |

2. 浮点型

   | 类型   | 存储需求 |
   | ------ | -------- |
   | double | 8字节    |
   | float  | 4字节    |

   :warning:**注意**对于浮点数的计算和判断最好使用`BigDecimal`类
   
3. 字节型

   | 类型 | 存储需求 |
   | ---- | -------- |
   | char | 1字节    |
   
4. 布尔型

   | 类型    | 存储需求 |
   | ------- | -------- |
   | boolean | 未知     |

### 基本类型之间的转换

存储需求大的类型转换为小的，会造成精度损失，小的转换为大的则不存在。在运算当中如果存在不相同的两个类型，则吧小的类型转化为大的类型后在进行运算。

![image-20200308114525688](..\assets\image-20200308114525688.png)

### 局部变量和成员变量的区别

1. 局部变量必须初始化，成员变量可以不初始化
2. 局部变量不能使用权限修饰符，但是可以使用`final`
3. 局部变量在栈当中，成员变量在堆当中
4. 局部变量的作用域在方法中，成员变量在整个对象
5. 局部变量随着方法的消失而消失，成员变量随着对象的回收而消失

### &&和&的区别

`&&`代表短路，如果第一个为`false`，则不用计算第二个；`&`则需要计算两个。

### >>和>>>的区别

`>>`向右边移动规定数字，如果有符号，则用符号为填充高位；`>>>`不管是否有符号都用==0==填充高位

### equal使用事项

1. 尽量使用`“str”.equals(Object)`的方式，可以避免空指针异常
2. 可以采用`Objects.equals(Object,Object)`的方式进行比较

### 空串与Null串

空串也就是给字符串赋值一个`“”`，只不过长度为0，不会报空指针异常，而Null串意味着该变量还没有对象，如果直接调用相关方法会造成空指针异常，因此，对一个字符串变量需要采用如下顺序进行空串和Null串判断

```java
if(str != null && str.length() != 0)
```

### String\StringBuilder\StringBuffer的区别

1. 三者底层的存储结构都是字节数组，只不过`String`的是不变的字节数组，其他两者不是
2. `String`由于其不变形，可以用作共享数据
3. `StringBuilder`不是线程安全的，所以性能更好，而`StringBuffer`是线程安全的，性能更低

### 格式说明符（System.out.prinft()）

![](D:\MyBook\Java\assets\20200308152817.png)



### while和do while的区别

1. `while`是先判断在循环，可能一次都不执行；
2. `do while`是先执行在判断，最少都可以执行一次；

### 命令行参数的使用

当通过`java Message -g cruel world`方式运行`java`文件的时候，则会在`arg[]`字符串数组中存储`-g cruel world`。



## 类与对象

### 类之间的关系

1. 依赖：一个类的对象需要操作其他类的对象
2. 聚合：一个类的对象拥有其他类的对象
3. 继承：一个类的对象继承另一个类的对象

:smile:表达类关系的UML符号

![](D:\MyBook\Java\assets\20200308214221.png)



### 浅拷贝和深拷贝

1. 浅拷贝拷贝对象类型的时候是拷贝的引用，原始数据修改也会导致拷贝后的修改，拷贝基本类型则不会受原始数据的影响。
2. 深拷贝则是会对对象类型重新创建一个对象进行拷贝，不会受原始数据影响。

### 权限修饰符

1. public：任何类都可以访问
2. protected：同一个类或者子类中可以访问
3. default：同一个类或者同包中
4. private：同一个类

### 访问器返回可变对象时候

由于返回的是可变对象，和类私有属性指向同一个地址，会造成私有属性的改变，因此，在返回的时候需要进行复制。

### final的使用方法

可以用在方法、类、变量的前面。需特别注意用在变量前面，如果是基本类型，则因为这不能改变值，如果用在对象变量，则因为指向的地址不变，内容可以变。

### 静态方法的使用情况

1. 某个方法只需要通过显示参数，不会访问所在类的对象状态
2. 某个方法只需要访问类的静态域

### java的参数传递方式

其实都是值传递，都是对传递过来参数的拷贝，只不过当传递的是基本类型的时候，复制的是值，而传递过来对象的时候，复制的是引用对象的地址。

### 构造器

当类提供了有参构造器的时候，需要自己提供一个无参构造器，否则当调用`new ClassName()`时候，将会出现错误。

:warning:**注意**：对象初始化顺序为：静态块/静态变量->块/变量->构造器

### this的使用

this用来指代当前调用方法或者变量所在的对象，当用在构造器中调用另一个构造起的时候，必须放在==第一行==。

### super的使用

super用来指代超类，可以调用超类的方法，也可以调用超类的构造器。调用构造器的时候需要放在==第一行==。

### Random和Math.random

1. `Random`需要进行对象实例化后调用`.nextInt(int n)`方法，返回的是0~n-1的随机数
2. `Math.random`返回的是0~1的随机浮点数

### finalize的使用

用来清理垃圾回收器不能回收的资源，发生在垃圾回收器回收之前，也是被回收对象进行最后一次拯救的机会，通过重写该方法，重新挂载到==GC ROOT==上，就能避免回收，但是只能运行一次这个方法。

### 类设计技巧

1. 保证数据私有化
2. 对数据进行初始化
3. 不要在类中使用过多的基本类型
4. 类单一职责原则
5. 类名和方法名体现职责
6. 优先使用不可变的类

## 继承

### 强类型转换

将大类型转换为小类型，会造成损失或者错误。特别是对于对象的强转换，最好在转换前进行类型的判断（`instanceof`）。

### 抽象类和接口类的区别

1. 抽象类不一定全是抽象方法，可以有具体的实现方法。接口类则全是抽象方法。
2. 抽象类和接口类都可以有具体的数据，但是接口类的变量权限修饰符只能是`public`。
3. 抽象类的方法修饰符可以为`public\protected\default`，而接口类只能为`public`。
4. 抽象类和接口类都不能实例化对象。
5. 抽象类只能单继承，而接口类可以多方式。

### equals方法

`Object`中的`equals`方法默认是比较的两者地址引用是否一样，如果要比较对象状态值是否相同，就需要重写该方法。

### hashCode方法

`hashCode`方法是`Object`自带的方法，默认的是返回对象存储地址，如果需要更具对象内容进行哈希值的计算，则需要进行重写。

:warning:**注意：**`String`类重写了`hashCode`方法，是根据内容进行计算，而`StringBuilder和StringBuffer`则是返回的对象地址。

### 为什么equal和hashCode要求一起重写

如果两个对象是相等的，那么他们的==hashCode==一定一样；如果两个对象的==hashCode==一样，但是这两个对象仍然不一定相等，因为类计算哈希值的算法不一定一样。所以一般先用`hashCode`进行判断，如果不相等就一定不相等，如果相等再用`equal`进行判断。

:slightly_smiling_face:[https://www.jianshu.com/p/6d2645be55c1](https://www.jianshu.com/p/6d2645be55c1)

### 对象包装器与自动装箱

基本类型都有对应的对象类，简称为包装器。这些包装器一旦构造就不可变，且是不能定义子类的。

| 基本类型 | 包装类    |
| -------- | --------- |
| int      | Integer   |
| long     | Long      |
| float    | Float     |
| double   | Double    |
| short    | Short     |
| byte     | Byte      |
| char     | Character |
| boolean  | Boolean   |

### 反射

反射就是把类中的信息封装到其他对象中。`Class`类中主要由域、方法、构造器组成。`getFields、getMethods、getConstructots`返回所有的公共域、方法和构造器，包括超类的。而`getDeclareFileds\getDeclareMethods\getDeclaredConstrucots`返回所有的域、方法和构造器，但不包括超类。



## 接口、lambda、内部类

### 接口默认方法的优点

可以在已有的接口类添加默认方法，这样就算以前的实现类没有实现这个默认方法，也可以进行编译，不会报错。

:warning:**注意：**解决默认方法冲突有以下办法：

> 1)超类优先：如果超类提供了一个具体方法，则会超类优先。
>
> 2)接口冲突：如果一个超接口提供了一个默认方法，另一个接口提供了一个同名而且参数路诶性相同的，必须覆盖这个方法解决冲突。

### 类优先规则

如果一个类同时继承和实现了一个类，并且继承和实现的类中都有同样的方法名，则该类只会考虑继承类的该方法。

### 方法应用

有的方法是现成的，可以直接引用。

```java
Timer t = new Timer(1000, event -> System.out.println(event));
// 等同于
Timer t = new Timer(1000, System.out::println);


Arrays.sort(strings, (first, second) -> first.length - second.length);
// 等同于
Arrays.sort(strings, String::compareToIgnoreCase);
    
```

用==::==操作符分隔方法名与对象类名，主要有以下三种情况：

* Object::instanceMethod
* Class::staticMethod
* Class::instanceMethod

:warning:**注意：**对于第三种`class::instanceMethod`中的第一个参数将作为方法的目标。

### lambda中的变量作用域

可以引用lambda范围外的变量，但必须是不可变的。

### 函数式接口

![](..\assets\QQ截图20200313182841.png)

### 内部类使用场景

1. 内部类可以访问该类定义所在的作用域中的数据，包括私有数据
2. 内部类可以对同一个包中的其他类隐藏起来
3. 当想要定义一个回调函数且不想编写大量代码时，使用匿名内部类比较快捷

### 内部类的作用

1. 内部类访问外围变量
2. 局部内部类
3. 匿名内部类
4. 静态内部类

### 代理模式

代理模式主要分为以下几类：

1. 静态代理

   提前编辑好代理类代码，实现代理模式；在编译器就生成了代理类

2. 动态代理

   在程序运行时创建的代理模式，又分为以下几类：

   * 基于接口的JDK动态代理技术

   * 基于类的CGLIB动态代理技术
## 集合

###  Collection接口的集合类

1. List接口

   * ArrayList

     通过==数组==进行元素的存储。

     ![](..\assets\ArrayList.png)

   * LinkedList

     底层存储结构为==结点==。

     ![](../assets/LinkedList.png)

   > ArrayList由于其随机读取，对于读取具有高性能，但是对于存储和删除具有效率低；
   >
   > LinkedList由于链表，对于插入和删除具有高效能，但是随机读取效能低；

2. 散列集

   不用记住要查找的元素的顺序，通过计算对象的散列码获得对应位置，所以存储的元素是无序的。其底层存储结构为==数组链表==。

   * set接口

     * HashSet

       基于散列表的集，不重复且无序的。其底层存储是基于==HashMap==。但是只有`key`，没有`value`，因为所有元素的`value`都指向一个地方。
       
     * TreeSet
     
       基于散列表的集，不重复且有序的。排序是通过树结构完成的。
   
3. 队列（Queue）

   * ArrayDeque

     数据结构为数组，通过两个索引分别指向头和尾，并且是可以动态增长的。

   * LinkedList

     数据结构为链表，每个元素代表一个节点，类维持两个节点指向头和尾节点。也是可以动态增长的。

   * PriorityQueue

     优先级队列，其数据结构采用的堆。

### Map接口的集合类

1. HashMap

   * 变量

   * 方法

     1. 扩容方法

        ```java
        final Node<K,V>[] resize() {
            // 扩容之前，先存储最迟数组
                Node<K,V>[] oldTab = table;
            // 三元符号判断初始数组的大小，0或者数组长度
                int oldCap = (oldTab == null) ? 0 : oldTab.length;
            // 获得最迟的扩容界限
                int oldThr = threshold;
            // 定义新数组的容量和扩容界限
                int newCap, newThr = 0;
            // 分情况讨论：
            // 1.原始数组的容量大于0的时候
                if (oldCap > 0) {
                    // 如果大于最大容量
                    if (oldCap >= MAXIMUM_CAPACITY) {
                        // 则扩容界限为Interger最大,此时无法进行扩容了，直接返回原始数组.
                        threshold = Integer.MAX_VALUE;
                        return oldTab;
                    }
                    // 如果原始数组大小扩容两倍小于最大值，并且原始数组大于等于出四只，则扩容后数组的扩容界限为原始界限的两倍。
                    else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&
                             oldCap >= DEFAULT_INITIAL_CAPACITY)
                        newThr = oldThr << 1; // double threshold
                }
            // 新数组的容量等于原数组的扩容界限
                else if (oldThr > 0) // initial capacity was placed in threshold
                    newCap = oldThr;
                else {               // zero initial threshold signifies using defaults
                    newCap = DEFAULT_INITIAL_CAPACITY;
                    newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
                }
                if (newThr == 0) {
                    float ft = (float)newCap * loadFactor;
                    newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?
                              (int)ft : Integer.MAX_VALUE);
                }
                threshold = newThr;
                @SuppressWarnings({"rawtypes","unchecked"})
                    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];
                table = newTab;
                if (oldTab != null) {
                    for (int j = 0; j < oldCap; ++j) {
                        Node<K,V> e;
                        if ((e = oldTab[j]) != null) {
                            oldTab[j] = null;
                            if (e.next == null)
                                newTab[e.hash & (newCap - 1)] = e;
                            else if (e instanceof TreeNode)
                                ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);
                            else { // preserve order
                                Node<K,V> loHead = null, loTail = null;
                                Node<K,V> hiHead = null, hiTail = null;
                                Node<K,V> next;
                                do {
                                    next = e.next;
                                    if ((e.hash & oldCap) == 0) {
                                        if (loTail == null)
                                            loHead = e;
                                        else
                                            loTail.next = e;
                                        loTail = e;
                                    }
                                    else {
                                        if (hiTail == null)
                                            hiHead = e;
                                        else
                                            hiTail.next = e;
                                        hiTail = e;
                                    }
                                } while ((e = next) != null);
                                if (loTail != null) {
                                    loTail.next = null;
                                    newTab[j] = loHead;
                                }
                                if (hiTail != null) {
                                    hiTail.next = null;
                                    newTab[j + oldCap] = hiHead;
                                }
                            }
                        }
                    }
                }
                return newTab;
            }
        
        ```

        

2. TreeMap

   采用树映射，通过树进行有序插入

3. LinkedHashMap

   可以记录插入元素项的顺序。通过访问顺序进行迭代，并且每次调用`get和put`方法后，受到影响的条目将从当前的位置删除，放到条目链表的尾部。

### 映射的几种视图

1. 键集

   `Set<K> keySet`，可以调用迭代器的`remove`方法，删除键的同时会删除映射对里面的对应键/值。

2. 值集合

   `Collection<V> values()`

3. 键/值对集

   `Set<Map.Entry<K,V>> entrySet()`

### Arrays.asList()的注意事项

`Arrays.asList`返回的对象是一个视图对象，其数据结构还是数组，其返回的类是`Arrays`内部的一个`ArrayList`类，如果调用与迭代器相关的`add、remove0`方法，则会抛出错误。

## 并发

### 进程和线程的区别

1. 进程是程序的运行，程序是静态的，而进程是动态的。
2. 进程之间互相独立，而同一个进程中的线程共享数据。
3. 进程之间的切换比线程的开销高。

### 什么叫上下文切换

CPU给每个线程分配一个时间片，当每个线程对应时间片执行完后就会切换到下一个任务，并且在切换前会保存上一个任务的状态，以便切回到这个任务时候，可以再次加载。所以上下文切换就是任务从保存到再加载的过程。

### Synchronized的作用位置

1. 方法

   * 普通方法

     锁是当前方法的对象实例

   * 静态方法

     当前类的==class对象==

2. 同步方法块

   锁是括号里的对象
   
3. synchronized的优化

   在JDK1.6中进行了相关优化，通过设置锁的四种状态：无锁状态、

   偏向锁状态、轻量级锁、重量级锁。

### 原子操作

处理器通过总线锁和缓存锁来保证原子性。

1. 总线锁

   对系统内存进行枷锁，当一个线程对系统内存进行操作时候，其他线程不能访问。

2. 缓存锁

   总线锁吧CPU和内存之间的通信锁定了，使得锁定期间，其他处理器不能操作其他内存地址的数据，开销较大。缓存锁是内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，当他写回到内存中的时候，会修改内部的内存地址，并使其他线程缓存无效。

   :warning:**注意：**以下情况不会使用缓存锁定。

   > 1、操作的数据不能缓存到处理器内部。此时要是用总线锁
   >
   > 2、有些处理器不支持缓存锁

### CAS原子操作的三大问题

1. ABA问题

   CAS一直存在一个ABA问题，即A值变为B值后有变回A值，进行CAS检查的时候回认为没有进行任何变化。后来通过追加状态，每次更新都把状态加1，那么A->B->A变为了1A->2B->3A。

2. 循环时间开销大

   如果一直不满足条件，则会导致CPU使用率大，带来非常大的开销

3. 只能保证一个共享变量的原子操作

### ReentrantLock解析

实现==Lock==接口，并且内部类分别有三个`Sync\NofairSync\FairSync`,这三个类的关系为`NofairSync和FairSync`继承并且实现了`Sync`。

1. ReentrantLock的相关方法只是起着代理的作用，其实际调用的是公平锁或者非公平锁实现的方法。

2. 非公平锁的含义是锁的获取是无序的，对于在等待队列的线程是随机获取锁。

3. 公平锁则是公平获取。

   * 锁的获取

     > 1.首先对status进行判断，如果等于0，这说明锁还没有被获取，此时则首先对等待队列进行判断，如果为空，则直接获取锁，否则判断等待队列第一个节点是否等于该线程，等于则从队列断开并获取锁。
     >
     > 2.如果大于0，则判断线程是否相等，相等则staus++;

   * 锁的释放

     公平锁的释放和非公平锁的释放是一样的实现方式

4. 公平锁和非公平锁的区别

   * 线程获取锁的顺序不同，公平锁是FIFO，而非公平是随机的。
   * 获取锁的时候，非公平锁如果判断当前锁状态为未被占用，则直接占用，而公平锁还需要判断队列是否有等待线程。

### 内存可见性

当共享变量在一个处理器或者进程中被修改过后，需要立马刷新到主内存当中，并且其他线程或者处理器中的对应变量失效，重新从内存中读取。

### happens-before

如果一个操作的执行结果需要对另一个操作可见，那么这两个操作之间必须有==happens-before==关系。这个关系不一定要求操作在前，而是要求前个操作的值对后续操作==可见==。

其关系有如下：

1. 程序顺序规则

   一个线程中的每个操作，==happens-before==该线程中的后续操作

2. 监视器锁规则

   一个锁的解锁，==happens-before==对该锁的解锁

3. volatile变量规则

   对一个==volatile==域的写，==happens-before==任意后续的读

4. 传递性

   如果A==happens-before==B，且B==happens-before==C，则A==happens-before==C。

### 重排序

编译器或处理器为了提高程序性能对指令序列进行重新排序。对于同一线程或者处理器中具有数据依赖性的指令不会重排序，因为会导致结果不同。但是对于不同处理器或者不同线程之间的数据依赖性不被考虑。

### as-if-serial语义

不管怎么重排序。==单线程程序==的执行结果都不能被改变。

### 顺序一致性内存模型

是一种被计算机科学家理想化了的理论参考模型。有两大特性：

1. 一个线程中的所以必须按照程序的顺序来操作。
2. （不管程序是否同步）所有线程都只能看到一个单一的操作执行顺序

:warning:**注意：**JMM模型在正确同步的情况下，程序执行结果和顺序一致性内存模型一样，但是顺序一致性按照指令串行执行，不会重排序，而JMM模型在保证正确结果的前提下，尽量优化程序性能。

### long、double等读写

`long\double`是64位基本类型，在早期的内存模型中，需要分为两个32位进行读写，可能导致数据的不准确，但是在==JDK5==后，读变得必须具有原子性（必须一次性读完，不能分两个事务读取）。

### 构造逸出

被构造对象的引用在构造函数中逸出。

```java
public Test {
   private Test obj;
    public Test() {
        obj = this;
    }
}
```

### happens-before和as-if-serial的区别

happens-before是保证正确同步的多线程程序的执行结果不被改变。

as-if-serial是保证单线程程序的结果不被改变。

两者的目的都是为了在==保证正确==结果的前提下，尽可能提高程序执行的==并行度==。

### 双重检查锁定的弊端

对于一个类的实例化其内部分为三步：分配空间、初始化、引用指定，在线程保证一致性的前提下，可能存在重排序，因此会导致双重检查锁定的弊端。

### JMM的内存可见性保证

按程序类型划分：

1. 单线程程序。不会出现内存可见性问题。编译器、处理器共同确保执行结果与顺序一致性执行结果相同。
2. 正确同步的多线程陈旭。通过编译器、处理器在保证结果与顺序一致性相同的前提下，提高并发性。
3. 未同步、未正确的多线程陈旭。提供最小保障，值要么是以前的要么是初始化的。

### 线程通过start()和run()的区别

`run()`是线程的一个方法，通过调用该方法则会变为串行，不能达到并行的目的。

### 中断复位

对于有的方法在中断的时候回抛出异常，在抛出异常的时候回使中断标志复位，如果想保持中断标志，需要在抛出异常位置 重新设置中断标志。

### 锁获取的位置

锁的获取不要放在==try==中，避免在获取锁的时候发生异常导致锁无故释放。

### 锁和同步器的关系

锁的实现中聚合同步器，利用同步器实现锁的语义。锁是面向使用者的，而同步器则是面向锁的实现者。

同步器设计是基于==模板方法模式==。所以使用者需要继承同步器并且进行一些方法的重新，然后把同步器实现组合到锁当中。

同步器中提供了`getState\setState\compareAndSetState()方法来操作同步状态`。在子类中可以重写`tryAcquire\tryRelease\tryAcquireShared\tryReleasedShared`方法。

### 公平锁和非公平锁的区别

公平锁的锁获取是按照FIFO原则，所以线程切换次数达，而非公平锁的所获取是随机的，虽然可能导致==饥饿==，但是极少线程切换。

### HashMap的容量大小是2的N次方的原因

便于通过按位与的散列算法来获得索引。所以必须保证容量是2的N次方。

### 原子操作类的实现

所有原子操作类的实现基本原理都相同，其最主要的内容如下：

```java
//基于Unsafe类来进行线程安全的操作    
private static final Unsafe unsafe = Unsafe.getUnsafe();
    private static final long valueOffset;

    static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicInteger.class.getDeclaredField("value"));
        } catch (Exception ex) { throw new Error(ex); }
    }

    private volatile int value;
```

### execute和submit的区别

1. `execute`没有返回值，`submit`有返回值
2. `execute`的输入是一个==Runnable==实例，`submit`返回一个==future==队形，可以通过==future的get方法==获取返回值。